name: 'Deploy Infrastructure (Multi-Region)'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.5.0'
  WORKING_DIRECTORY: './terraform'
  TF_VAR_environment: 'prod'
  TF_VAR_app_service_plan_sku: 'B1'
  TF_VAR_app_service_plan_tier: 'Basic'
  TF_VAR_min_instances: '1'
  TF_VAR_max_instances: '3'
  TF_VAR_health_check_path: '/health'
  TF_VAR_alert_email: 'haripriyaveluchamy@aity.dev'
  TF_VAR_log_retention_days: '30'
  TF_VAR_existing_resource_group_name: 'vibetrader-RAG-rg'
  
  # App settings
  TF_VAR_app_settings: |
    {
      WEBSITES_ENABLE_APP_SERVICE_STORAGE = "false"
      WEBSITES_PORT = "8000"
      SCM_DO_BUILD_DURING_DEPLOYMENT = "true"
      ENABLE_ORYX_BUILD = "true"
      PYTHON_VERSION = "3.12"
      ENVIRONMENT = "production"
      HEALTH_CHECK_ENABLED = "true"
      API_HOST = "0.0.0.0"
      API_PORT = "8000"
      AZURE_OPENAI_API_VERSION = "2024-02-01"
      AZURE_OPENAI_EMBEDDING_MODEL = "text-embedding-3-large"
      EMBEDDING_DIMENSION = "3072"
      QDRANT_COLLECTION_NAME = "news_articles"
      CACHE_TTL = "3600"
      DEFAULT_ARTICLE_LIMIT = "50"
      MAX_ARTICLE_CONTENT_CHARS = "10000"
      MAX_CHUNK_SIZE = "1000"
      SUMMARY_CACHE_SIZE = "1000"
      SUMMARY_CACHE_TTL = "3600"
    }

jobs:
  terraform:
    name: 'Terraform Multi-Region'
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    outputs:
      traffic_manager_url: ${{ steps.terraform_outputs.outputs.traffic_manager_url }}
      us_app_service_name: ${{ steps.terraform_outputs.outputs.us_app_service_name }}
      europe_app_service_name: ${{ steps.terraform_outputs.outputs.europe_app_service_name }}
      india_app_service_name: ${{ steps.terraform_outputs.outputs.india_app_service_name }}
      resource_group_name: ${{ steps.terraform_outputs.outputs.resource_group_name }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    # Fix for autoscale settings issue - simple version
    - name: Fix Autoscale Settings
      if: github.event.inputs.action == 'destroy'
      run: |
        # Remove problematic autoscale settings before destroy
        RESOURCE_GROUP="${{ env.TF_VAR_existing_resource_group_name }}"
        echo "Removing autoscale settings in $RESOURCE_GROUP before destroy..."
        
        az monitor autoscale setting delete --name autoscale-newsraag-us-prod --resource-group $RESOURCE_GROUP --yes 2>/dev/null || true
        az monitor autoscale setting delete --name autoscale-newsraag-eu-prod --resource-group $RESOURCE_GROUP --yes 2>/dev/null || true
        az monitor autoscale setting delete --name autoscale-newsraag-in-prod --resource-group $RESOURCE_GROUP --yes 2>/dev/null || true

    - name: Terraform Plan
      if: github.event.inputs.action != 'destroy'
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy')
      run: terraform apply -auto-approve tfplan
      
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve
        
    - name: Get Terraform Outputs
      if: github.event.inputs.action != 'destroy'
      id: terraform_outputs
      run: |
        echo "traffic_manager_url=$(terraform output -raw traffic_manager_url)" >> $GITHUB_OUTPUT
        echo "us_app_service_name=$(terraform output -raw us_app_service_name)" >> $GITHUB_OUTPUT
        echo "europe_app_service_name=$(terraform output -raw europe_app_service_name)" >> $GITHUB_OUTPUT
        echo "india_app_service_name=$(terraform output -raw india_app_service_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw existing_resource_group_name)" >> $GITHUB_OUTPUT

  trigger_app_deployment:
    name: 'Trigger App Deployment'
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy' && needs.terraform.outputs.traffic_manager_url != ''
    
    steps:
    - name: Trigger Multi-Region App Deployment
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-app.yml',
            ref: 'main',
            inputs: {
              infrastructure_ready: 'true',
              us_app_name: '${{ needs.terraform.outputs.us_app_service_name }}',
              europe_app_name: '${{ needs.terraform.outputs.europe_app_service_name }}',
              india_app_name: '${{ needs.terraform.outputs.india_app_service_name }}',
              resource_group: '${{ needs.terraform.outputs.resource_group_name }}'
            }
          });